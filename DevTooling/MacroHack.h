/// <auto-generated>
///	This code was generated by the C Preprocessor. Do not modify this file, as any changes will be overwritten on the next build.
/// </auto-generated>

// This is a hilariously terrible hack that allows me to use C macros in C#
// Yes, it's terrible, and no, I don't care.
// A lot of code needed to be copy-pasted to counter-jank RW's jank and the only way to do that without butchering readability was macros.
// Cope, seethe, and mald simultaneously.
// I at least did you the favor of isolating this to its own separate library, so that the garbage doesn't seep into the main code's public API.

#if !defined(ERROR_TRACK_BLOCK_START) && !defined(ERROR_TRACK_BLOCK_END)
	#ifdef DEBUG
		#define ERROR_TRACK_BLOCK_START try {
		#define ERROR_TRACK_BLOCK_END } catch (Exception ____err) { Log.LogError(____err); throw; }
	#else
		#define ERROR_TRACK_BLOCK_START {
		#define ERROR_TRACK_BLOCK_END }
	#endif
#endif

#if defined(REQUIRES_HARMONY_ARGS_PATCH) && !defined(DECLARED_HARMONY_ARGS_PATCH)
	#define DECLARED_HARMONY_ARGS_PATCH
	
	//////////////////////////////////

	#define DECLARE_HARMONY_PATCH_METHOD_HEAD(n, ...) [CPreprocessorGenerated] \
		private static bool AbstractReturningInjection##n##<TReturn, TInheritingType>(object __instance, MethodBase __originalMethod, ref TReturn __result, ##__VA_ARGS__)
	#define DECLARE_HARMONY_PATCH_METHOD_BASE(n, ARGSTYPED, ...) DECLARE_HARMONY_PATCH_METHOD_HEAD(n, ARGSTYPED) => AbstractReturningInjectionAny<TReturn, TInheritingType>(__instance, __originalMethod, ref __result, ##__VA_ARGS__##)
	
	#define DECLARE_HARMONY_PATCH_VOID_METHOD_HEAD(n, ...) [CPreprocessorGenerated] \
		private static bool AbstractVoidInjection##n##<TInheritingType>(object __instance, MethodBase __originalMethod, ##__VA_ARGS__)
	#define DECLARE_HARMONY_PATCH_VOID_METHOD_BASE(n, ARGSTYPED, ...) DECLARE_HARMONY_PATCH_VOID_METHOD_HEAD(n, ARGSTYPED) => AbstractVoidInjectionAny<TInheritingType>(__instance, __originalMethod, ##__VA_ARGS__##)

	//////////////////////////////////

	#define OARGN(n) object __##n

	#define OARG0 OARGN(0)
	#define ARG0 __0

	#define OARG1 OARG0, OARGN(1)
	#define ARG1 ARG0, __1

	#define OARG2 OARG1, OARGN(2)
	#define ARG2 ARG1, __2

	#define OARG2 OARG1, OARGN(2)
	#define ARG2 ARG1, __2

	#define OARG3 OARG2, OARGN(3)
	#define ARG3 ARG2, __3

	#define OARG4 OARG3, OARGN(4)
	#define ARG4 ARG3, __4

	#define OARG5 OARG4, OARGN(5)
	#define ARG5 ARG4, __5

	#define OARG6 OARG5, OARGN(6)
	#define ARG6 ARG5, __6

	#define OARG7 OARG6, OARGN(7)
	#define ARG7 ARG6, __7

	#define OARG8 OARG7, OARGN(8)
	#define ARG8 ARG7, __8

	#define OARG9 OARG8, OARGN(9)
	#define ARG9 ARG8, __9

	#define OARG10 OARG9, OARGN(10)
	#define ARG10 ARG9, __10
	
	#define DECLARE_HARMONY_PATCH_METHOD_METHOD_NULL DECLARE_HARMONY_PATCH_METHOD_BASE(0,,)
	#define DECLARE_HARMONY_PATCH_METHOD_METHOD_0 DECLARE_HARMONY_PATCH_METHOD_BASE(1,OARG0,ARG0)
	#define DECLARE_HARMONY_PATCH_METHOD_METHOD_1 DECLARE_HARMONY_PATCH_METHOD_BASE(2,OARG1,ARG1)
	#define DECLARE_HARMONY_PATCH_METHOD_METHOD_2 DECLARE_HARMONY_PATCH_METHOD_BASE(3,OARG2,ARG2)
	#define DECLARE_HARMONY_PATCH_METHOD_METHOD_3 DECLARE_HARMONY_PATCH_METHOD_BASE(4,OARG3,ARG3)
	#define DECLARE_HARMONY_PATCH_METHOD_METHOD_4 DECLARE_HARMONY_PATCH_METHOD_BASE(5,OARG4,ARG4)
	#define DECLARE_HARMONY_PATCH_METHOD_METHOD_5 DECLARE_HARMONY_PATCH_METHOD_BASE(6,OARG5,ARG5)
	#define DECLARE_HARMONY_PATCH_METHOD_METHOD_6 DECLARE_HARMONY_PATCH_METHOD_BASE(7,OARG6,ARG6)
	#define DECLARE_HARMONY_PATCH_METHOD_METHOD_7 DECLARE_HARMONY_PATCH_METHOD_BASE(8,OARG7,ARG7)
	#define DECLARE_HARMONY_PATCH_METHOD_METHOD_8 DECLARE_HARMONY_PATCH_METHOD_BASE(9,OARG8,ARG8)
	#define DECLARE_HARMONY_PATCH_METHOD_METHOD_9 DECLARE_HARMONY_PATCH_METHOD_BASE(10,OARG9,ARG9)
	#define DECLARE_HARMONY_PATCH_METHOD_METHOD_10 DECLARE_HARMONY_PATCH_METHOD_BASE(11,OARG10,ARG10)

	#define DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_NULL DECLARE_HARMONY_PATCH_VOID_METHOD_BASE(0,,)
	#define DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_0 DECLARE_HARMONY_PATCH_VOID_METHOD_BASE(1,OARG0,ARG0)
	#define DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_1 DECLARE_HARMONY_PATCH_VOID_METHOD_BASE(2,OARG1,ARG1)
	#define DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_2 DECLARE_HARMONY_PATCH_VOID_METHOD_BASE(3,OARG2,ARG2)
	#define DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_3 DECLARE_HARMONY_PATCH_VOID_METHOD_BASE(4,OARG3,ARG3)
	#define DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_4 DECLARE_HARMONY_PATCH_VOID_METHOD_BASE(5,OARG4,ARG4)
	#define DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_5 DECLARE_HARMONY_PATCH_VOID_METHOD_BASE(6,OARG5,ARG5)
	#define DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_6 DECLARE_HARMONY_PATCH_VOID_METHOD_BASE(7,OARG6,ARG6)
	#define DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_7 DECLARE_HARMONY_PATCH_VOID_METHOD_BASE(8,OARG7,ARG7)
	#define DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_8 DECLARE_HARMONY_PATCH_VOID_METHOD_BASE(9,OARG8,ARG8)
	#define DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_9 DECLARE_HARMONY_PATCH_VOID_METHOD_BASE(10,OARG9,ARG9)
	#define DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_10 DECLARE_HARMONY_PATCH_VOID_METHOD_BASE(11,OARG10,ARG10)

	#define DECLARE_ALL_HARMONY_RETURNING_PATCH_METHODS DECLARE_HARMONY_PATCH_METHOD_METHOD_NULL; \
		DECLARE_HARMONY_PATCH_METHOD_METHOD_0; \
		DECLARE_HARMONY_PATCH_METHOD_METHOD_1; \
		DECLARE_HARMONY_PATCH_METHOD_METHOD_2; \
		DECLARE_HARMONY_PATCH_METHOD_METHOD_3; \
		DECLARE_HARMONY_PATCH_METHOD_METHOD_4; \
		DECLARE_HARMONY_PATCH_METHOD_METHOD_5; \
		DECLARE_HARMONY_PATCH_METHOD_METHOD_6; \
		DECLARE_HARMONY_PATCH_METHOD_METHOD_7; \
		DECLARE_HARMONY_PATCH_METHOD_METHOD_8; \
		DECLARE_HARMONY_PATCH_METHOD_METHOD_9; \
		DECLARE_HARMONY_PATCH_METHOD_METHOD_10

	#define DECLARE_ALL_HARMONY_VOID_PATCH_METHODS DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_NULL; \
		DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_0; \
		DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_1; \
		DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_2; \
		DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_3; \
		DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_4; \
		DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_5; \
		DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_6; \
		DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_7; \
		DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_8; \
		DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_9; \
		DECLARE_HARMONY_PATCH_VOID_METHOD_METHOD_10

	#define DECLARE_ALL_HARMONY_PATCH_METHODS DECLARE_ALL_HARMONY_RETURNING_PATCH_METHODS; \
		DECLARE_ALL_HARMONY_VOID_PATCH_METHODS
#endif